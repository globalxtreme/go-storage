// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.1
// source: PublicStorage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublicStorage_Store_FullMethodName  = "/storage.PublicStorage/Store"
	PublicStorage_Delete_FullMethodName = "/storage.PublicStorage/Delete"
)

// PublicStorageClient is the client API for PublicStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicStorageClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (PublicStorage_StoreClient, error)
	Delete(ctx context.Context, in *PublicStorageDeleteRequest, opts ...grpc.CallOption) (*PublicStorageResponse, error)
}

type publicStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicStorageClient(cc grpc.ClientConnInterface) PublicStorageClient {
	return &publicStorageClient{cc}
}

func (c *publicStorageClient) Store(ctx context.Context, opts ...grpc.CallOption) (PublicStorage_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicStorage_ServiceDesc.Streams[0], PublicStorage_Store_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publicStorageStoreClient{stream}
	return x, nil
}

type PublicStorage_StoreClient interface {
	Send(*PublicStorageStoreRequest) error
	CloseAndRecv() (*PublicStorageResponse, error)
	grpc.ClientStream
}

type publicStorageStoreClient struct {
	grpc.ClientStream
}

func (x *publicStorageStoreClient) Send(m *PublicStorageStoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicStorageStoreClient) CloseAndRecv() (*PublicStorageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublicStorageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicStorageClient) Delete(ctx context.Context, in *PublicStorageDeleteRequest, opts ...grpc.CallOption) (*PublicStorageResponse, error) {
	out := new(PublicStorageResponse)
	err := c.cc.Invoke(ctx, PublicStorage_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicStorageServer is the server API for PublicStorage service.
// All implementations must embed UnimplementedPublicStorageServer
// for forward compatibility
type PublicStorageServer interface {
	Store(PublicStorage_StoreServer) error
	Delete(context.Context, *PublicStorageDeleteRequest) (*PublicStorageResponse, error)
	mustEmbedUnimplementedPublicStorageServer()
}

// UnimplementedPublicStorageServer must be embedded to have forward compatible implementations.
type UnimplementedPublicStorageServer struct {
}

func (UnimplementedPublicStorageServer) Store(PublicStorage_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedPublicStorageServer) Delete(context.Context, *PublicStorageDeleteRequest) (*PublicStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicStorageServer) mustEmbedUnimplementedPublicStorageServer() {}

// UnsafePublicStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicStorageServer will
// result in compilation errors.
type UnsafePublicStorageServer interface {
	mustEmbedUnimplementedPublicStorageServer()
}

func RegisterPublicStorageServer(s grpc.ServiceRegistrar, srv PublicStorageServer) {
	s.RegisterService(&PublicStorage_ServiceDesc, srv)
}

func _PublicStorage_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicStorageServer).Store(&publicStorageStoreServer{stream})
}

type PublicStorage_StoreServer interface {
	SendAndClose(*PublicStorageResponse) error
	Recv() (*PublicStorageStoreRequest, error)
	grpc.ServerStream
}

type publicStorageStoreServer struct {
	grpc.ServerStream
}

func (x *publicStorageStoreServer) SendAndClose(m *PublicStorageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicStorageStoreServer) Recv() (*PublicStorageStoreRequest, error) {
	m := new(PublicStorageStoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicStorage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicStorageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicStorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicStorage_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicStorageServer).Delete(ctx, req.(*PublicStorageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicStorage_ServiceDesc is the grpc.ServiceDesc for PublicStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.PublicStorage",
	HandlerType: (*PublicStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _PublicStorage_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _PublicStorage_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "PublicStorage.proto",
}
